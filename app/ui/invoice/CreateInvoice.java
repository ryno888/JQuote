/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ui.invoice;

import app.ui.quote.EditQuoteItem;
import app.db.DB_address;
import app.db.DB_invoice;
import app.db.DB_invoice_item;
import app.db.DB_person;
import app.db.DB_quote_item;
import app.ui.quote.QuoteItemList;
import core.com.date.ComDate;
import core.com.db.ComDBDatabase;
import core.com.db.ComDBQueryBuilder;
import core.com.utils.ComClipboard;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ryno Laptop
 */
public class CreateInvoice extends javax.swing.JFrame {
    private final Object id;
    private final ArrayList<Object[]> itemArr;
    private final DB_person db_person;
    private final DB_address db_address;
    private final DB_invoice db_invoice;
//    private final Person obj;
//    private final DB_invoice db_invoice = new DB_invoice();
    Double invCostExcl = 0.00;
    /**
     * Creates new form CreateInvoice
     * @param per_id
     */
    public CreateInvoice(Object per_id) {
        this.id = per_id;
        this.itemArr = new ArrayList();
        this.db_person = new DB_person(per_id);
        this.db_invoice = new DB_invoice();
        this.db_address = db_person.get_address();
        
        initComponents();
        this.setPopupMenu();
        this.setFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableMenu = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        perTradingNameField = new javax.swing.JTextField();
        perAttentionToField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        invNumberField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        addedItemsTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Invoice");
        setPreferredSize(new java.awt.Dimension(700, 500));

        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));

        jLabel1.setText("Trading Name:");

        jLabel2.setText("Attention To:");

        jLabel3.setText("Invoice Nr:");

        addedItemsTable.setAutoCreateRowSorter(true);
        addedItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Price", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        addedItemsTable.setGridColor(new java.awt.Color(204, 204, 255));
        addedItemsTable.setSelectionBackground(new java.awt.Color(0, 153, 255));
        addedItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addedItemsTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addedItemsTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(addedItemsTable);
        if (addedItemsTable.getColumnModel().getColumnCount() > 0) {
            addedItemsTable.getColumnModel().getColumn(0).setMinWidth(0);
            addedItemsTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            addedItemsTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jButton4.setText("Add Item");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("Generate Invoice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Send Invoice");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(41, 41, 41)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(invNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                            .addComponent(perAttentionToField)
                                            .addComponent(perTradingNameField))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(perTradingNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(perAttentionToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(invNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(736, 549));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addedItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addedItemsTableMouseClicked

    }//GEN-LAST:event_addedItemsTableMouseClicked

    private void addedItemsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addedItemsTableMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            int row = addedItemsTable.rowAtPoint(evt.getPoint());
            int column = addedItemsTable.columnAtPoint(evt.getPoint());
            addedItemsTable.requestFocus();
            addedItemsTable.changeSelection(row, column, false, false);

            if (!addedItemsTable.isRowSelected(row)) {
                addedItemsTable.changeSelection(row, column, false, false);
            }

            tableMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_addedItemsTableMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new AddItemToInvoice(this).setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(this.itemArr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please add items to the quote before you continue", "Alert", JOptionPane.WARNING_MESSAGE);
        }else{
            
            GenerateInvoice generateInvoice = new GenerateInvoice();
            ArrayList<DB_invoice_item> invoiceItemArr = new ArrayList();
            
            this.db_invoice.set("inv_date_created", ComDate.getDate());
            this.db_invoice.set("inv_number", invNumberField.getText());
            this.db_invoice.set("inv_ref_person", this.id);
            this.db_invoice.set("inv_total_excl", calculateInvoiceTotal());
            this.db_invoice.insert();
            
            this.itemArr.forEach(e -> {
                System.out.println(e[0]);
                DB_invoice_item db_invoice_item = new DB_invoice_item();
                db_invoice_item.set("ini_ref_invoice", db_invoice.get_id());
                db_invoice_item.set("ini_ref_quote_item", e[0]);
                db_invoice_item.insert();
                invoiceItemArr.add(db_invoice_item);
            });
            
            generateInvoice.setInv_account_nr(this.db_person.get("per_account_nr").toString());
            generateInvoice.setInv_company_name(this.db_person.get("per_trading_name").toString());
            generateInvoice.setInv_invoice_nr(this.db_invoice.get("inv_number").toString());
            generateInvoice.setInv_company_add_line1(this.db_address.get("add_line1").toString());
            generateInvoice.setInv_company_add_line2(this.db_address.get("add_line2").toString());
            generateInvoice.setInv_company_suburb(this.db_address.get("add_suburb").toString());
            generateInvoice.setInv_company_city(this.db_address.get("add_town").toString());
            generateInvoice.setInv_company_code(this.db_address.get("add_code").toString());
            generateInvoice.setInv_company_country(this.db_address.get("add_country").toString());
            generateInvoice.setInv_total(calculateInvoiceTotal());
            generateInvoice.setInv_date_created(ComDate.getDate());
            invoiceItemArr.forEach(e -> {
                DB_quote_item quote_item = e.get_quote_item();
                System.out.println(quote_item.obj);
//                generateInvoice.additem(quote_item.get_id(), quote_item.get("qut_name"), quote_item.get("qut_unit_price"), quote_item.get("qut_unit"), quote_item.get("qut_price"));
                generateInvoice.additem(quote_item);
            });
            generateInvoice.saveAs();
            
            
//            GenerateInvoice generateInvoice = new GenerateInvoice();
//            ArrayList<InvoiceItem> invoiceItemArr = new ArrayList();
//            Invoice invoice = (Invoice)db_invoice.get_fromdefault();
//            invoice.setInvDateCreated(new Date());
//            invoice.setInvNumber(invNumberField.getText());
//            invoice.setInvRefPerson(BigInteger.valueOf(this.id));
//            invoice.setInvTotalExcl(calculateInvoiceTotal());
//            db_invoice.insert();
//
//            this.itemArr.forEach(e -> {
//                DB_invoice_item db_invoice_item = new DB_invoice_item();
//                InvoiceItem invoice_item = (InvoiceItem)db_invoice_item.get_fromdefault();
//                invoice_item.setIniRefInvoice(BigInteger.valueOf(invoice.getInvId()));
//                invoice_item.setIniRefQuoteItem(BigInteger.valueOf(Long.parseLong(e[0].toString())));
//                db_invoice_item.insert();
//                invoiceItemArr.add(invoice_item);
//            });
//
            
//            generateInvoice.setInv_account_nr(this.obj.getPerAccountNr());
//            generateInvoice.setInv_invoice_nr(invoice.getInvNumber());
//            generateInvoice.setInv_company_add_line1("");
//            generateInvoice.setInv_company_add_line2("");
//            generateInvoice.setInv_company_city("Cape Town");
//            generateInvoice.setInv_company_code("7550");
//            generateInvoice.setInv_company_country("South Africa");
//            generateInvoice.setInv_company_name(this.obj.getPerTradingName());
//            generateInvoice.setInv_total(invoice.getInvTotalExcl());
//            generateInvoice.setInv_date_created(UtilDate.getDate(invoice.getInvDateCreated(), Constants.DATE_CUSTOM_1));
//            invoiceItemArr.forEach(e -> {
//                InvoiceItem invoice_item = (InvoiceItem) e;
//                DB_quote_item db_quote_item = new DB_quote_item();
//                QuoteItem quoteItem = (QuoteItem) db_quote_item.get_fromdb(invoice_item.getIniRefQuoteItem());
//
//                generateInvoice.additem(quoteItem.getQutId(), quoteItem.getQutName(), quoteItem.getQutUnitPrice(), quoteItem.getQutUnit());
//            });
//            generateInvoice.saveAs();
            
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable addedItemsTable;
    private javax.swing.JTextField invNumberField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField perAttentionToField;
    private javax.swing.JTextField perTradingNameField;
    private javax.swing.JPopupMenu tableMenu;
    // End of variables declaration//GEN-END:variables
    
    //--------------------------------------------------------------------------
    private Long getId(){
        Double d = Double.parseDouble(addedItemsTable.getModel().getValueAt(addedItemsTable.getSelectedRow(), 0).toString());
        return Math.round(d);
    }
    //--------------------------------------------------------------------------
    private Double calculateInvoiceTotal(){
        invCostExcl = 0.00;
        this.itemArr.forEach(e -> {
            ComDBQueryBuilder sql = new ComDBQueryBuilder();
            sql.select("qut_price");
            sql.from("quote_item");
            sql.where("AND", "qut_id = " + e[0] + "");
            sql.limit(1);
            String cost = ComDBDatabase.selectsingle(sql.get_sql());
            invCostExcl = invCostExcl + Double.parseDouble(cost);
            System.out.println(invCostExcl);
        });
       
        return invCostExcl;
    }
    //--------------------------------------------------------------------------
    private void setPopupMenu() {
        try {
            JMenuItem editItem = new JMenuItem("Edit Details");
            editItem.setIcon(new ImageIcon(ImageIO.read(getClass().getResourceAsStream("/assets/icon/if_pen.png"))));
            JMenuItem deleteItem = new JMenuItem("Delete");
            deleteItem.setIcon(new ImageIcon(ImageIO.read(getClass().getResourceAsStream("/assets/icon/if_trash.png"))));
            JMenuItem copyItem = new JMenuItem("Copy");
            JMenuItem cancelItem = new JMenuItem("Cancel");
            deleteItem.addActionListener(e -> {
                int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Delete Entry", JOptionPane.YES_NO_OPTION);
                if(result == 0){
//                    DB_quote_item quote_item = new DB_quote_item();
//                    quote_item.get_fromdb(getId());
//                    quote_item.delete();
//                    int selectedIndex = addedItemsTable.getSelectedRow();
//                    while (selectedIndex >= 0) {
//                        int modelIndex = addedItemsTable.convertRowIndexToModel(selectedIndex);
//                        DefaultTableModel model = (DefaultTableModel) addedItemsTable.getModel();
//                        model.removeRow(modelIndex);
//                        selectedIndex = addedItemsTable.getSelectedRow();
//                    }
                }
                
            });
            cancelItem.addActionListener(e -> {
                tableMenu.setVisible(false);
            });
            copyItem.addActionListener(e -> {
                ComClipboard.copy(addedItemsTable.getModel().getValueAt(addedItemsTable.getSelectedRow(), addedItemsTable.getSelectedColumn()).toString());
            });
            editItem.addActionListener(e -> {
                new EditQuoteItem(getId(), addedItemsTable.getSelectedRow()).setVisible(true);
            });
            tableMenu.add(editItem);
            tableMenu.add(deleteItem);
            tableMenu.add(copyItem);
            tableMenu.add(cancelItem);
        } catch (IOException ex) {
            Logger.getLogger(QuoteItemList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //--------------------------------------------------------------------------
    private void setFields() {
        perAttentionToField.setText(this.db_person.format_name());
        perTradingNameField.setText(this.db_person.get("per_trading_name").toString());
        invNumberField.setText(this.db_invoice.generate_account_nr());
    }
    //--------------------------------------------------------------------------
    public void addItem(String qut_id, String qut_name, String qut_unit, String qut_price, String qut_unit_price) {
        Object[] object = new Object[]{
            qut_id, 
            qut_name, 
            qut_unit,
            qut_price, 
            qut_unit_price
        };
        this.itemArr.add(object);
        DefaultTableModel model = (DefaultTableModel) addedItemsTable.getModel();
        model.addRow(object);
        calculateInvoiceTotal();
    }
    //--------------------------------------------------------------------------
}
